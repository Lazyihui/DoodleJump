//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scr_Runtime/Core_Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player1Controls"",
            ""id"": ""d04d3b92-313a-4ada-8680-2f6ff60b05a3"",
            ""actions"": [
                {
                    ""name"": ""HPress"",
                    ""type"": ""Button"",
                    ""id"": ""dde59249-f5e9-4ca9-949f-769b39fc8685"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""QPress"",
                    ""type"": ""Button"",
                    ""id"": ""81d4daea-840c-44ec-8679-8b0704610aa5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8427c201-4fdd-4981-a01b-5983e5596ea8"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a0314ee-d797-4610-a9f3-e82f58244285"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2Controls"",
            ""id"": ""a4a561af-9079-485e-bbbe-90363c3d6fcb"",
            ""actions"": [
                {
                    ""name"": ""EPress"",
                    ""type"": ""Button"",
                    ""id"": ""e7936300-08a1-4dcc-8eeb-c9bbf3037a1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RPress"",
                    ""type"": ""Button"",
                    ""id"": ""179de8b4-cdec-4219-bbba-8d910fc3a953"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3d662fe-9a05-4de9-9e79-d813b3bfcb9f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b644469-e508-4551-a528-d6e5c1fb31e6"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player1Controls
        m_Player1Controls = asset.FindActionMap("Player1Controls", throwIfNotFound: true);
        m_Player1Controls_HPress = m_Player1Controls.FindAction("HPress", throwIfNotFound: true);
        m_Player1Controls_QPress = m_Player1Controls.FindAction("QPress", throwIfNotFound: true);
        // Player2Controls
        m_Player2Controls = asset.FindActionMap("Player2Controls", throwIfNotFound: true);
        m_Player2Controls_EPress = m_Player2Controls.FindAction("EPress", throwIfNotFound: true);
        m_Player2Controls_RPress = m_Player2Controls.FindAction("RPress", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player1Controls
    private readonly InputActionMap m_Player1Controls;
    private List<IPlayer1ControlsActions> m_Player1ControlsActionsCallbackInterfaces = new List<IPlayer1ControlsActions>();
    private readonly InputAction m_Player1Controls_HPress;
    private readonly InputAction m_Player1Controls_QPress;
    public struct Player1ControlsActions
    {
        private @Controls m_Wrapper;
        public Player1ControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @HPress => m_Wrapper.m_Player1Controls_HPress;
        public InputAction @QPress => m_Wrapper.m_Player1Controls_QPress;
        public InputActionMap Get() { return m_Wrapper.m_Player1Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer1ControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_Player1ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1ControlsActionsCallbackInterfaces.Add(instance);
            @HPress.started += instance.OnHPress;
            @HPress.performed += instance.OnHPress;
            @HPress.canceled += instance.OnHPress;
            @QPress.started += instance.OnQPress;
            @QPress.performed += instance.OnQPress;
            @QPress.canceled += instance.OnQPress;
        }

        private void UnregisterCallbacks(IPlayer1ControlsActions instance)
        {
            @HPress.started -= instance.OnHPress;
            @HPress.performed -= instance.OnHPress;
            @HPress.canceled -= instance.OnHPress;
            @QPress.started -= instance.OnQPress;
            @QPress.performed -= instance.OnQPress;
            @QPress.canceled -= instance.OnQPress;
        }

        public void RemoveCallbacks(IPlayer1ControlsActions instance)
        {
            if (m_Wrapper.m_Player1ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer1ControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_Player1ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player1ControlsActions @Player1Controls => new Player1ControlsActions(this);

    // Player2Controls
    private readonly InputActionMap m_Player2Controls;
    private List<IPlayer2ControlsActions> m_Player2ControlsActionsCallbackInterfaces = new List<IPlayer2ControlsActions>();
    private readonly InputAction m_Player2Controls_EPress;
    private readonly InputAction m_Player2Controls_RPress;
    public struct Player2ControlsActions
    {
        private @Controls m_Wrapper;
        public Player2ControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @EPress => m_Wrapper.m_Player2Controls_EPress;
        public InputAction @RPress => m_Wrapper.m_Player2Controls_RPress;
        public InputActionMap Get() { return m_Wrapper.m_Player2Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer2ControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_Player2ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2ControlsActionsCallbackInterfaces.Add(instance);
            @EPress.started += instance.OnEPress;
            @EPress.performed += instance.OnEPress;
            @EPress.canceled += instance.OnEPress;
            @RPress.started += instance.OnRPress;
            @RPress.performed += instance.OnRPress;
            @RPress.canceled += instance.OnRPress;
        }

        private void UnregisterCallbacks(IPlayer2ControlsActions instance)
        {
            @EPress.started -= instance.OnEPress;
            @EPress.performed -= instance.OnEPress;
            @EPress.canceled -= instance.OnEPress;
            @RPress.started -= instance.OnRPress;
            @RPress.performed -= instance.OnRPress;
            @RPress.canceled -= instance.OnRPress;
        }

        public void RemoveCallbacks(IPlayer2ControlsActions instance)
        {
            if (m_Wrapper.m_Player2ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer2ControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_Player2ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player2ControlsActions @Player2Controls => new Player2ControlsActions(this);
    public interface IPlayer1ControlsActions
    {
        void OnHPress(InputAction.CallbackContext context);
        void OnQPress(InputAction.CallbackContext context);
    }
    public interface IPlayer2ControlsActions
    {
        void OnEPress(InputAction.CallbackContext context);
        void OnRPress(InputAction.CallbackContext context);
    }
}
